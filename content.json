{"meta":{"title":"Hero","subtitle":null,"description":null,"author":"Daniel","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"深度学习--数据维度","slug":"深度学习-数据纬度","date":"2017-08-15T08:49:38.000Z","updated":"2018-05-07T12:07:44.209Z","comments":true,"path":"2017/08/15/深度学习-数据纬度/","link":"","permalink":"http://yoursite.com/2017/08/15/深度学习-数据纬度/","excerpt":"","text":"数据是有纬度的标量 例如简单的数字 1，2，3. 称之为标量， 标量的维度是零。 我们是无法可视化零维度的。向量 由一列数据组成的数，叫做向量。 向量包括两种， 一种是行向量， 一种是列向量。向量是有长度的。矩阵 矩阵是二维的值。 我们用行数和列数来描述矩阵的形状。张量 张量可以指任何n维的值集合。 总结： 标量是零维张量 向量是一维张量 矩阵是二维张量 任何大于二维的对象， 我们就成为张量。 NumPy NumPy系统是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵。 导入NumPy大多数情况下，会看到这样一个约定，将其命名为np1import numpy as np 数据类型和形状NumPy中处理数字的最常见方式是通过ndarray对象。 支持快速的数学运算。 可以存储任意数量的纬度，可以使用ndarray 来表示我们之前提到的任意数据类型： 标量，向量，矩阵或张量。","categories":[],"tags":[{"name":"技术 深度学习","slug":"技术-深度学习","permalink":"http://yoursite.com/tags/技术-深度学习/"}]},{"title":"怦然心动","slug":"怦然心动","date":"2017-08-14T15:34:52.000Z","updated":"2018-05-07T12:00:49.908Z","comments":true,"path":"2017/08/14/怦然心动/","link":"","permalink":"http://yoursite.com/2017/08/14/怦然心动/","excerpt":"","text":"“Some of us get dipped in flat, some in satin, some in gloss. But every once in a while you find someone who’s iridescent, and when you do, nothing will ever compare. “ 有的人浅薄，有的人金玉其表败絮其中。有一天 你会遇到一个彩虹般绚烂的人，当你遇到这个人后，会觉得其他人都只是浮云而已。 –《怦然心动》","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"}]},{"title":"前端开发中常见问题杂烩(1).","slug":"前端开发中常见问题杂烩(1)","date":"2017-04-29T18:40:00.000Z","updated":"2017-05-10T03:09:02.000Z","comments":true,"path":"2017/04/30/前端开发中常见问题杂烩(1)/","link":"","permalink":"http://yoursite.com/2017/04/30/前端开发中常见问题杂烩(1)/","excerpt":"","text":"影响网页加载速度慢的几大原因: 文件太大, HTML,CSS,JS,图片等文件都算 请求资源的数量太多造成网络堵塞 css,html代码写的不合理, 导致网页渲染慢 js中过多的使用同步请求,导致后面的内容加载速度慢 js中垃圾没有回收,内容泄露,代码逻辑复杂等导致页面运行缓慢 个人网速,或者服务器的网速慢导致 CSS加载顺序 位置属性 大小 文字系列 背景 其他","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"}]},{"title":"JS中的变量,作用域和内存问题","slug":"关于JS中变量,作用域和内存问题","date":"2017-04-17T10:17:15.000Z","updated":"2017-05-10T03:26:03.000Z","comments":true,"path":"2017/04/17/关于JS中变量,作用域和内存问题/","link":"","permalink":"http://yoursite.com/2017/04/17/关于JS中变量,作用域和内存问题/","excerpt":"","text":"JavaScript的变量只是在特定的时间用于保存特定值的一个名字而已.不存在定义某个变量必须要保存何种数据类型值的规则. ECMAScript(JavaScript核心)中的变量包含两种不同数据类型的值:&gt;基本类型值 和 &gt;引用类型值 . 基本类型值: 指的是简单的数据段.(5种基本数据类型). 引用类型值: 指那些可能由多个值构成的对象(对象,数组,函数). 引用类型的值是保存在内存中的对象. JS不允许直接访问内存中的位置.也就是说不能直接操作对象的内存空间. 动态添加属性: 对于值类型和引用类型,在值保存到变量以后,对不同类型值执行的操作非常不一样. 只能给引用类型值动态的添加属性. 通过下面的例子进行演示. 引用类型:12345var person = new Object();person.name = \"Daniel\";alert(person.name); //\"Daniel\" 给对象添加了一个name属性,并给其赋值.如果对象不被销毁或是属性不被删除,则这个属性一致存在. 随时可以通过alert()函数进行访问. 值类型:1234var name = \"Daniel\";name.age = 18;alert(name.age); //underfined不能给基本类型的值添加属性,虽然不会报错,但当我们访问这个属性的时候,会发现这个属性不见了. 赋值变量值 在从一个变量向量一个变量复制基本类型值和引用类型值时, 两者的操作是不同的. 值类型:1234var num1 = 5;var num2 = num1;此时num2中保存的值也是5,但num1和num2 是完全独立的,num2中的值也只是num1中5的一个副本.两个变量参与的任何操作互相不影响. 引用类型:当从一个变量向另一个变量复制引用类型的值时,这个值的副本实际上是一个指针,而这个指针指向存储在堆中的一个对象,复制后,两个变量将引用同一个对象.123456var obj1 = new Object();var obj2 = obj1;obj1.name = \"Jack\";aler(obj2.name); //\"Jack\"obj1保存了一个新对象,然后被复制给了obj2中,也就是说obj1和obj2都指向了同一个对象. 所以改变其中一个变量就会影响另一个变量. 传递参数ECMAScript中所有的参数传递都是按值传递的.那么结合上面所说,也就是说函数外部的值复制给函数内部的参数,就和把值从一个变量复制到另一个变量一样.在向参数传递基本类型的值时,被传递的值会被复制给局部变量(即命名参数).12345678910function addNum (num) &#123; num += 10; return num;&#125;var count = 20;var result = addNum(count);alert(count); //20, 没有变化alert(result); //30在调用这个函数时,变量count被当做参数传进函数,数值20被复制给参数num,在函数内num被加上了10,但这并不会影响函数外部的count. 在向参数传递引用类型的值时,会把这个值在内存中的地址复制给一个局部变量,因此这个局部变量的变化会反映在函数的外部.123456789function setName (obj) &#123; obj.name = \"Jack\";&#125;var person = new Object();setName(person);alert(person.name); //\"Jack\"用变量person保存了一个新创建的对象,这个变量被传递到setName()中后就被复制给了obj.在这个函数内部,obj和person引用的是同一个对象.所以,当函数内部为obj添加name属性后,函数外部的person也具有了该属性. 在这里很多人会错误的认为: 在局部作用域中修改的对象会在全局的作用域中反映出来,这就说明参数是按引用传递的. 为了证明对象是按值传递的,看下面的例子:1234567891011function setName(obj) &#123; obj.name = \"Jack\"; obj = new Object(); obj.name = \"Rose\";&#125;var person = new Object();setName(person);alert(person.name); //\"Jack\"这个例子与之前的区别就在于,在函数中将一个新对象赋给了变量obj.但当访问person.name时,显示的值依旧是Jack. 这说明即使在函数内部修改了参数的值,但原始的引用仍然保持没变. 实际上当函数内部重写obj时,这时候obj引用的就是一个局部对象了.在函数执行完后立即被销毁. 可以把JS里的函数参数想象成局部变量. 检测类型检测基本类型的时候用的是typeof,但是在检测引用类型的值时,要用instanceof操作符.语法如下:1234result = variable instanceof constructor//constructor 构造器alert(person instanceof Object); //变量person是Object吗? 在检测一个引用类型值和Object构造函数时,instanceof始终会返回true. 但如果你用来检测基本类型的值,就会返回false,因为基本类型不是对象. 执行环境及作用域首先了解几个概念;执行环境: 执行环境定义了变量或函数有权访问的其他数据,决定了它们各自的行为.(全局执行环境是最外围的一个执行环境), 某个执行环境中的所有代码执行完后,这个环境就会被销毁,其中的所有变量和函数定义也随之销毁.执行环境只有两种: 全局和局部. 变量对象: 环境中定义的所有变量和函数都保存在这个对象中. 每一个执行环境都有一个与之关联的变量对象. 作用域链: 当代码在一个环境中执行时,会创建变量对象的一个作用域链,作用域链的用途是保证对执行环境有权访问的所有变量和函数的有序访问. 作用域链的前端,始终是当前执行的代码所在环境的变量对象. 如果这个环境是函数,则将其活动对象作为变量对象. 内部环境可以通过作用域链访问所有的外部环境,但外部环境不能访问内部环境中的任何变量和函数. 每个环境都能向上搜索作用域链,但不能向下搜索作用域链而进入另一个执行环境. 总结: 基本类型值在内存中占据固定大小的空间,因此会被保存在栈内存中; 从一个变量向另一个变量复制基本类型的值,会创建这个值的副本,赋值给新变量.两者独立,任何操作不会互相影响. 引用类型的值是对象,保存在内存中; 包含引用类型值的变量实际上并不是包含对象本身,而是一个指向该对象的指针; 从一个变量向另一个变量复制引用类型的值,复制的其实是指针,因此两个变量最终都指向同一个对象; 确定一个值是哪种基本类型用typeof,确定一个值是哪种引用类型用的是instanceof操作符;所有变量 所有变量都存在于一个执行环境(也称为作用域)中,这个执行环境决定了变量的生命周期,以及哪一部分代码可以访问其中变量.下面是关于执行环境的总结: 执行环境有全局执行环境和函数执行环境之分; 每次进入一个新执行环境,都会创建一个用于搜索变量和函数的作用域链; 函数的局部环境不仅有权访问函数作用域中的变量,而且有权访问其父环境,乃至全局环境; 全局环境只能访问在全局环境中定义的变量和函数,而不能直接访问局部环境中的任何数据; 变量的执行环境有助于确定应该何时释放内存;","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"}]},{"title":"关于ECMAScript6 的一些新特性(1).","slug":"关于ECMAScript6 的一些新特性(1)","date":"2017-04-17T10:15:30.000Z","updated":"2017-05-10T03:02:46.000Z","comments":true,"path":"2017/04/17/关于ECMAScript6 的一些新特性(1)/","link":"","permalink":"http://yoursite.com/2017/04/17/关于ECMAScript6 的一些新特性(1)/","excerpt":"","text":"ES6块级作用域–let:123456789//ES5中只有全局作用域和局部作用域. 在ES6中 有了块级作用域. if(true)&#123; let fruit = 'apple';&#125; console.log(fruit); /*使用let 定义的变量只能用于定义它的那个块里面, 在块的外面是获取不到的. 目的就是要把当前的变量绑定到当前的作用域里*/ const:123456789101112131415161718 //在ES6中const用来表示一个衡量, 所谓衡量就是定义之后,不能被再重新赋值了. const fruit = 'apple'; console.log(fruit); const fruit = 'banana'; console.log(fruit); // 会报错. /*const 限制的是给衡量分配值的这个动作, 并不是显示衡量里面的值.*/ $ const arr = []; arr.push('apple','banana','orange'); console.log(arr); //输出后你会看见数组中,🍎,🍌和🍊. arr = []; //但是当我重新给arr赋值的时候.会报错. breakfast123456789//在ES6中breakfast, 分解结构的功能. function breakfast()&#123; return ['🍎', '🍌', '🍊'];&#125; let [dessert, drink, fruit] = breakfast(); console.log(dessert, drink, fruit);","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"}]}]}